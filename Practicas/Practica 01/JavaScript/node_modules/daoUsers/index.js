class DAOUser{
	constructor(pool){
		this.pool = pool;
	}

	getUser(email, pass, callback){
	this.pool.getConnection(function(err, connection) {
		if (err) {
			callback(new Error("Error al obtener la conexion"), null);
		} else {
			connection.query(
				"SELECT * FROM users where email = ?",
				[email],
				function(err, rows) {
				connection.release()
				if (err) {
					callback(new Error("Error al obtener los usuarios"), null)
				} else {
					callback(null, rows)
				}
			})
		}
	})
	}

	addUser(user,callback){
		this.pool.getConnection((err,connection)=>{
		
		if(err) callback(new Error("Error al obtener la conexion"));

		else
			connection.query("insert into users (email,password,name,gender,birthdate,image) values (?,?,?,?,?,?)",
			[user.email,user.password,user.name,user.gender,user.birthdate,user.image],(err,info)=>{
				
				connection.release();

				if(err) callback(new Error("Error al introducir nuevo usuario"));
				else{
					user.id = info.insertId;
					callback(null);
				}
			});
	})
	}

	findByName(name,callback){
		this.pool.getConnection((err,connection)=>{

		if(err) callback(new Error("Error al obtener la conexion"), null);

		else
			connection.query("select * from users where name = ?",[name],(err,result)=>{
				
				connection.release();

				if(err) callback(new Error("Error al obtener usuarios por nombre"),null);
				else callback(null,result);
			})
	})
	}

	sendFriendRequest(originUserId,destinationUserId,callback){
		this.pool.getConnection((err,connection)=>{

			if (err) callback(new Error("Error al obtener la conexion"));

			else 		//status -> 0=sin responder, 1=aceptada, 2=rechazada
			connection.query("insert into friendRequests (originUser,destinationUser,status) values (?,?,0)",
			[originUserId,destinationUserId],(err)=>{
				
				connection.release();

				if (err) callback(new Error("Error al enviar solicitud"));
				else callback(null);
			});
		})
	}

	//utilizo el id porque el mail se puede modificar
	modifyUser(userId,newUser,callback){
		this.pool.getConnection((err,connection)=>{

			if (err) callback(new Error("Error al obtener la conexion"));
			else
				connection.query(
				"update users set email = ?,password = ?,name = ?,gender = ?,birthdate = ?,image = ? where id = ?",
				[newUser.email,newUser.password,newUser.name,newUser.gender,newUser.birthdate,newUser.image, userId],
				(err)=>{

					connection.release();
					
					if (err) callback(new Error("Error al modificar usuario"));
					else callback(null);
				})
		})
	}

	getPendingFriendRequest(userId,callback){
		this.pool.getConnection((err,connection)=>{
			
			if (err) callback(new Error("Error al obtener la conexion"));
			else
				connection.query("SELECT originUser from friendrequests WHERE status = 0 and destinationUser = ?;",[userId],
				(err,result)=>{

					connection.release();

					if(err) callback(new Error("Error al obtener peticiones pendientes"),null);
					else callback(null, result);

				})
		})
	}

	confirmRequest(originUserId,destinationUserId,accept,callback){
		this.pool.getConnection((err,connection)=>{

			if (err) callback(new Error("Error al obtener la conexion"));
			else{
				let status;
				if (accept) status = 1;
				else status = 2;

				connection.query("UPDATE friendrequests SET status = ? WHERE destinationUser = ? and originUser = ?;",[status,destinationUserId,originUserId],
				(err)=>{

					connection.release();

					if(err) callback(new Error("Error al confirmar peticion"));
					else callback(null);
				});
			}
		})
	}
	getFriends(userId,callback){
		this.pool.getConnection((err,connection)=>{
			
			if (err) callback(new Error("Error al obtener la conexion"));
			else
				connection.query("SELECT originUser,destinationUser FROM friendrequests WHERE status = 1 and (destinationUser = ? or originUser = ?);",[userId,userId],
				(err,result)=>{

					connection.release();

					if(err) callback(new Error("Error al obtener amigos"),null);
					else{

						//Para evitar que el propio usuario salga como su amigo
						let friends = [];
						
						result.forEach(element => {
							
							if(element.originUser != userId)
								friends.push(element.originUser);
							else
								friends.push(element.destinationUser);
						});
						 callback(null, friends);
					}

				})
		})
	}
}

module.exports = DAOUser;





