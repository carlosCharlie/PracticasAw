class DAOUser{
	constructor(pool){
		this.pool = pool;
	}

	getUser(email, pass, callback){
	this.pool.getConnection(function(err, connection) {
		if (err) {
			callback(new Error("Error al obtener la conexion"), null);
		} else {
			connection.query(
				"SELECT * FROM users where email = ?",
				[email],
				function(err, rows) {
				connection.release()
				if (err) {
					callback(new Error("Error al obtener los usuarios"), null)
				} else {
					callback(null, rows)
				}
			})
		}
	})
	}

	addUser(user,callback){
		this.pool.getConnection((err,connection)=>{
		
		if(err) callback(new Error("Error al obtener la conexion"));

		else
			connection.query("insert into users (email,password,name,gender,birthdate,image) values (?,?,?,?,?,?)",
			[user.email,user.password,user.name,user.gender,user.birthdate,user.image],(err,info)=>{
				
				connection.release();

				if(err) callback(new Error("Error al introducir nuevo usuario"));
				else{
					user.id = info.insertId;
					callback(null);
				}
			});
	})
	}

	findByName(name,callback){
		this.pool.getConnection((err,connection)=>{

		if(err) callback(new Error("Error al obtener la conexion"), null);

		else
			connection.query("select * from users where name = ?",[name],(err,result)=>{
				
				connection.release();

				if(err) callback(new Error("Error al obtener usuarios por nombre"),null);
				else callback(null,result);
			})
	})
	}

	sendFriendRequest(originUser,destinationUser){
		this.pool.getConnection((err,connection)=>{

		if(err) callback(new Error("Error al obtener la conexion"));

		else 		//status -> 0=sin responder, 1=aceptada, 2=rechazada
		connection.query("insert into friendRequests (originUser,destinationUser,state) values (?,?,0)",
		[originUser.id,destinationUser.id],(err)=>{
			
			connection.release();

			if(err) callback(new Error("Error al enviar solicitud"));
			else callback(null);
		});
	})
	}
}

module.exports = DAOUser;





