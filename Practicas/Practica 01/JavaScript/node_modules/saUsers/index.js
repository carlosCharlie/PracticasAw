const daoUsers = require('daoUsers');
const dateFormat = require('dateFormat');
const parser = require('parser');

function doLogin(user, pass, pool, callback){
    let daoUser = new daoUsers(pool);
    
    if (parser.parsePass(pass)){
		daoUser.getUser(user.email, pass, function(err, rows){
			if (err) {
				callback(-5, err.message, null);
			} else {			
				if (rows.length == 0){
                    callback(-1, "Usuario no encontrado", null);
				} else if (rows[0].password != pass) {
                    callback(-2, "Contrase√±a incorrecta", null);
				} else {
					callback(0, "Login correcto", {
						id: rows[0].id,
						email: rows[0].email,
						name: rows[0].name,
						gender: rows[0].gender,
						years: dateFormat.calculateAge(rows[0].birthdate),
						image: rows[0].image,
						points: rows[0].points,
					})				
				}
			}
		})
	} else {
		callback(-3, "Error al parsear", null);
	}
}

function getFriends(id, pool, callback){
	let daoUser = new daoUsers(pool);
	daoUser.getFriends(id, function(err, friends){
		if (err){
			callback(null);
		} else {
			var userFriends = [];
			friends.forEach(function(friend){
				daoUser.findById(friend, function(err, rows){
					userFriends.push(
						{
							id: rows[0].id,
							email: rows[0].email,
							name: rows[0].name,
							gender: rows[0].gender,
							years: dateFormat.calculateAge(rows[0].birthdate),
							image: rows[0].image,
							points: rows[0].points,
						}
					);
				})
			})
			callback(userFriends);
		}
	})
}

module.exports = {
	doLogin: doLogin,
	getFriends: getFriends
}