const daoUsers = require('daoUsers');
const dateFormat = require('dateFormat');
const parser = require('parser');

function doLogin(user, pass, pool, callback){
    let daoUser = new daoUsers(pool);
    
    if (parser.parsePass(pass)){
		daoUser.getUser(user.email, pass, function(err, rows){
			if (err) {
				callback(-5, err.message, null);
			} else {			
				if (rows.length == 0){
                    callback(-1, "Usuario no encontrado", null);
				} else if (rows[0].password != pass) {
                    callback(-2, "Contraseña incorrecta", null);
				} else {
					callback(0, "Login correcto", {
						id: rows[0].id,
						email: rows[0].email,
						name: rows[0].name,
						gender: rows[0].gender,
						birthdate: dateFormat.calculateDate(rows[0].birthdate),
						years: dateFormat.calculateAge(rows[0].birthdate),
						image: rows[0].image,
						points: rows[0].points,
					})				
				}
			}
		})
	} else {
		callback(-3, "Error al parsear", null);
	}
}

function getFriends(id, pool, callback){
	let daoUser = new daoUsers(pool);
	daoUser.getFriends(id, function(err, friends){
		if (err){
			callback(null);
		} else {
			callback(friends);
		}
	})
}

function getPendingFriendRequest(id,pool,callback){
	let daoUser = new daoUsers(pool);
	daoUser.getPendingFriendRequest(id,(err,result)=>{
		if (result==null) callback(err,[]);
		else{
			result.forEach((request)=>{
				if(request.image==null)
					request.image = "noImage.png";
			})
			callback(err,result);
		}
	});
}

function confirmRequest(originUserId,destinationUserId,accept,pool,callback){
	let daoUser = new daoUsers(pool);
	daoUser.confirmRequest(originUserId,destinationUserId,accept,callback);
}

function addUser(newUserData,pool,callback){
	let text = "";
	if(!parser.parseName(newUserData.name))
	text+="-El nombre no cumple los requisitos";
	
	if(newUserData != null && !parser.parsePass(newUserData.password))
	text+="\n-La contraseña no cumple los requisitos (Debe tener al menos una longitud de 8).";
	
	if(!parser.parseEmail(newUserData.email))
	text+="\n-El email no cumple los requisitos. (Ej:usuario@servidor).";

	if(text.length>0)
		callback(-5,text,null);
	else{
		let daoUser = new daoUsers(pool);
		daoUser.addUser(newUserData,callback);
	}
}

function modifyUser(userId,newUserData,imageCheck,pool,callback){

	let text = "";
	if(!parser.parseName(newUserData.name))
	text+="-El nombre no cumple los requisitos";
	
	if(newUserData != null && !parser.parsePass(newUserData.password))
	text+="\n-La contraseña no cumple los requisitos (Debe tener al menos una longitud de 8).";
	
	if(!parser.parseEmail(newUserData.email))
	text+="\n-El email no cumple los requisitos. (Ej:usuario@servidor).";

	if(text.length>0)
		callback(-5,text,null);
	else{
		let daoUser = new daoUsers(pool);
		daoUser.modifyUser(userId,newUserData,function(err){
			if (err){
				callback(-1, err.message, null)
			} else {
				callback(0, "Modificacion correcta", {
					id: userId,
					email: newUserData.email,
					name: newUserData.name,
					gender: newUserData.gender,
					birthdate: dateFormat.calculateDate(new Date(newUserData.birthdate)),
					years: dateFormat.calculateAge(new Date(newUserData.birthdate)),
					image: newUserData.image,
					points: newUserData.points,
				})			
			}
		})
	}
}

module.exports = {
	doLogin: doLogin,
	getFriends: getFriends,
	getPendingFriendRequest:getPendingFriendRequest,
	confirmRequest:confirmRequest,
	addUser:addUser,
	modifyUser:modifyUser
}